# Initialize a repository
git init

# See status
git status

# Add new file
git add hello.py
git status

# Set user email and name
git config --global user.email "dagoberto.salazar@gmail.com"
git config --global user.name "Dagoberto Salazar"

# Commit a change, with comment
git commit -m "creating hello.py"
git status
git add hello.py myname.py
git status
git commit -m "added myname module"
vim .gitignore
git add .gitignore
git commit -m "created .gitignore"

# See a log of the changes
git log

# Checkout (use) the repository at an specific point in time (98011e69...)
git checkout 98011e69fda0df3937e99e2d7ac11ca3a1e37959

# Back to the top of the main branch (master)
git checkout master

# Make a change in '.gitignore' but then drop it
vim .gitignore
git checkout -- .gitignore

vim .gitignore
git status
git add .gitignore
git commit -m "modifying .gitignore to exclude all .pyc files"

# To create a new branch
git checkout -b my_new_feature

# To see all the branches
git branch

# Add a change in the NEW 'my_new_feature' branch
git add hello.py
git status
git commit -m "added code for feature x"

# Get back to the top of the master branch
git checkout master

# Compare the state of two branches
git show-branch my_new_feature master
git checkout my_new_feature
git checkout master
git show-branch my_new_feature
git show-branch master

# 'HEAD' is where the repository is currently pointing to
git show-branch HEAD

git show-branch --sha1-name my_new_feature master

# Go back to 'master' and MERGE changes from 'my_new_feature' to 'master'
git checkout master
git merge my_new_feature

# Download a full repository
git clone https://github.com/jima80525/github-playground.git

# Download to the current computer the changes in an already present repository
git pull https://github.com/architest/git-example

# Upload the local changes to GitHub:
git push https://github.com/architest/git-example master

Simple git workflow:
====================

1. git status – Make sure your current area is clean.
2. git pull – Get the latest version from the remote. This saves merging issues later.
3. Edit your files and make your changes. Remember to run your linter and do unit tests!
4. git status – Find all files that are changed. Make sure to watch untracked files too!
5. git add [files] – Add the changed files to the staging area.
6. git commit -m "message" – Make your new commit.
7. git push origin [branch-name] – Push your changes up to the remote.
